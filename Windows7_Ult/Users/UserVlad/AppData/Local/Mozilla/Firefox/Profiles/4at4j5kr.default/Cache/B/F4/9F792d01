sid = '0xdcd4446c7705c0861955dd656e4887b7';

/*********************************** Globals **********************************/
var fah = {};

fah.timestamp = new Date().getTime();

fah.project_url =
    'http://www.stanford.edu/group/pandegroup/cgi-bin/project-jsonp.py';
fah.blog_url = 'http://folding.typepad.com/';
fah.twitter_account = 'pandelab';

fah.email_subject = 'Our unused computer power can help find a cure.';
fah.email_body =
    'Here is a site where we can share our unused computer power to help ' +
    'Stanford University professors find cures for diseases like ' +
    'Alzheimer\'s, Cancer, and Parkinson\'s. It only takes about 5 minutes ' +
    'to join the cause.\n\n' +
    'Click here to watch the video: http://folding.stanford.edu';

fah.version = null;

fah.disconnected = false;
fah.failed_updates = 0;
fah.connection_timeout = 7000; // ms
fah.last_update = (new Date).valueOf();

fah.power_slide = null;

fah.user = 'Anonymous';
fah.team = 0;
fah.passkey = '';

fah.news_loaded = false;

fah.ppd_ui = null;
fah.last_ppd = null;

fah.slots = {};
fah.projects = {};


/******************************** Browser Detect ******************************/
// From http://www.quirksmode.org/js/detect.html
var BrowserDetect = {
    init: function () {
        this.browser = this.searchString(this.dataBrowser) ||
            "An unknown browser";

        this.version = this.searchVersion(navigator.userAgent)
            || this.searchVersion(navigator.appVersion)
            || "an unknown version";

        this.OS = this.searchString(this.dataOS) || "an unknown OS";
    },


    searchString: function (data) {
        for (var i = 0; i < data.length; i++) {
            var dataString = data[i].string;
            var dataProp = data[i].prop;
            this.versionSearchString =
                data[i].versionSearch || data[i].identity;

            if (dataString) {
                if (dataString.indexOf(data[i].subString) != -1)
                    return data[i].identity;

            } else if (dataProp) return data[i].identity;
        }
    },

    searchVersion: function (dataString) {
        var index = dataString.indexOf(this.versionSearchString);
        if (index == -1) return;

        return parseFloat(dataString.substring(
            index + this.versionSearchString.length + 1));
    },


    dataBrowser: [
        {
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        },
        {
            string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        },
        {
            string: navigator.vendor,
            subString: "Apple",
            identity: "Safari",
            versionSearch: "Version"
        },
        {
            prop: window.opera,
            identity: "Opera",
            versionSearch: "Version"
        },
        {
            string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        },
        {
            string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        },
        {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        },
        {
            string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        },
        {   // for newer Netscapes (6+)
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        },
        {
            string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer",
            versionSearch: "MSIE"
        },
        {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        },
        {   // for older Netscapes (4-)
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }
    ],

    dataOS : [
        {
            string: navigator.platform,
            subString: "Win",
            identity: "Windows"
        },
        {
            string: navigator.platform,
            subString: "Mac",
            identity: "Mac"
        },
        {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod"
        },
        {
            string: navigator.platform,
            subString: "Linux",
            identity: "Linux"
        }
    ]
};


/****************************** Utility functions *****************************/
// String.trim() is not supported by all browsers
if (typeof String.prototype.trim === 'undefined') {
    String.prototype.trim = function() {
        return String(this).replace(/^\s+|\s+$/g, '');
    };
}


// Array.indexOf() is not in IE < 9
if (typeof Array.prototype.indexOf == 'undefined') {
    Array.prototype.indexOf = function(elt, from) {
        var len = this.length >>> 0;

        if (typeof from == 'undefined') from = 0;
        else from = Number(from);
        from = from < 0 ? Math.ceil(from) : Math.floor(from);
        if (from < 0) from += len;

        for (; from < len; from++)
            if (from in this && this[from] === elt) return from;

        return -1;
    };
}


function obj_size(obj) {
    var count = 0;
    for (var i in obj) if (obj.hasOwnProperty(i)) count++;
    return count;
}


function debug(msg) {
    if (typeof console == 'undefined' ||
        typeof console.log == 'undefined') return;

    if (typeof msg !== 'string' && typeof JSON !== 'undefined')
        msg = JSON.stringify(msg);

    console.log('DEBUG: ' + msg);
}


function get_arg(arg, defaultValue) {
    return typeof arg == 'undefined' ? defaultValue : arg;
}


/**************************** Bug Report functions ****************************/
function bug_submit_ok() {
    $('#bug-submitting-dialog').dialog('destroy');
}


function bug_fail() {
    var dialog = $('#bug-submitting-dialog');

    var h2 = dialog.find('h2');
    h2.text('Bug report submission failed');
    h2.css('color', 'red');

    var iframe = $('#bug-iframe');
    iframe.css('display', 'none');
}


function bug_upload(log) {
    var form = $('#bug-dialog form');
    form.find(':input[name=log]').val(log);
    form.find(':input[name=ts]').val(new Date().toJSON());
    form.submit();
}


function bug_submit() {
    var fail = false;
    var dialog = $('#bug-dialog');

    // Category
    var category = dialog.find('select[name=category]');
    if (category.val() == 'choose') {
        category.addClass('input-warn');
        fail = true;
    } else category.removeClass('input-warn');

    // Description
    var description = dialog.find('textarea');
    if ($.trim(description.val()) == '') {
        description.addClass('input-warn');
        fail = true;
    } else description.removeClass('input-warn');

    if (fail) return false;

    $.ajax({url: 'log.txt.bz2.b64', data: {max: 4 * 1024 * 1024, sid: sid},
            dataType: 'text', success: bug_upload, error: bug_fail});

    dialog.dialog('destroy');

    dialog = $('#bug-submitting-dialog');

    dialog.dialog({
        modal: true, resizable: false, width: 600,
        buttons: {'Ok': bug_submit_ok},
        dialogClass: 'no-close', closeOnEscape: false,
        beforeClose: function() {return false;}});
}


function bug_cancel() {
    $('#bug-dialog').dialog('destroy');
}


function bug_report() {
    var dialog = $('#bug-dialog');

    var user = $('#user').val();
    var team = $('#team').val();

    if (typeof user == 'undefined' || user == '') user = 'Anonymous';
    if (typeof team == 'undefined' || team == '') team = '0';

    dialog.find('input[name=user]').val(user);
    dialog.find('input[name=team]').val(team);

    dialog.find('select[name=category]').val('choose');
    dialog.find('textarea').val('');

    dialog.dialog({
        modal: true, resizable: false, width: 600,
        buttons: {'Cancel': bug_cancel, 'Submit': bug_submit},
        dialogClass: 'no-close', closeOnEscape: false,
        beforeClose: function() {return false;}});
}


/******************************** UI functions ********************************/
function tabs_activate(event, ui) {
    if (ui.newPanel.attr('id') == 'news') load_news();
}


function power_slide_stop(event, ui) {
    send_command({url: 'api/set', data: {power: ui.get_power()}});
}


function cause_changed(event) {
    var value = $('#cause select').attr('value');
    send_command({url: 'api/set', data: {cause: value}});
}


function fold_anon() {
    $('#unconfigured').dialog('destroy');
    send_command({url: 'api/configured/set'});
}


function configure_id() {
    $('#unconfigured').dialog('destroy');
    $('#tabs').tabs({active: 1});
}


function unconfigured() {
    $('#unconfigured').dialog({
        modal: true, resizable: false, width: 600,
        title: 'Identity Not Configured',
        buttons: {'Configure an Identity': configure_id,
                  'Contribute Anonymously': fold_anon},
        close: fold_anon
    });
}


function update_basic(data) {
    // Version
    if (data.version != fah.version) {
        fah.version = data.version;

        $('#about-version').html("Version " + fah.version);
        document.title += ' - Version ' + fah.version
    }

    $('#user').val(fah.user = data.user);
    $('#team').val(fah.team = data.team);
    $('#passkey').val(fah.passkey = data.passkey);
    $('#hidden-passkey').val(fah.passkey);
    $('#cause select').val(data.cause.toLowerCase());

    if (fah.power_slide != null)
        fah.power_slide.fah_powerbar('option', 'level', data.power);
}


/******************************* Power bar class ******************************/
(function($) {
    $.widget('ui.fah_powerbar', {
        options: {
            level: 'off',
            label: null
        },

        slider: null,
        label: null,
        levels: ['off', 'idle_light', 'idle', 'light', 'medium', 'full'],
        level_map:
        {off: 1, idle_light: 2, idle: 3, light: 4, medium: 5, full: 6},
        active: false,


        _get_tooltip: function() {
            var text = this.get_power();
            if (typeof text == 'undefined') return '';
            var tip = $('#' + text + '_help').contents().clone();
            if (!this.active)
                return $('<div><b>Current setting: </b>').append(tip);
            else return tip;

        },


        _get_level: function(text) {
            var level = this.level_map[text.toLowerCase()];
            return typeof level == 'undefined' ? 3 : level;
        },


        get_power: function(level) {
            if (typeof level == 'undefined') level = this.level;
            return this.levels[level - 1];
        },


        _set_power: function(level) {
            var self = this;

            var text;
            if (typeof level == 'string') {
                text = level.toLowerCase();
                level = self._get_level(text);

            } else text = self.get_power(level);
            text = text.replace('_', ' ');

            if (self.label == null && self.options.label != null)
                self.label = $(self.options.label);
            if (self.label != null) self.label.text(text);

            self.slider.slider('value', level);
            self.level = level;
            self.slider.tooltip(
                {content: function() {return self._get_tooltip();},
                 hide: false, show: false});
        },


        _slide_stop: function(event, ui) {
            this._trigger('stop', null, this);
            this.active = false;
        },


        _slide_start: function(event, ui) {
            this.active = true;
            this._trigger('start', null, this);
        },


        _slide_change: function(event, ui) {
            this._set_power(ui.value);
            this._trigger('change', null, this);
        },


        _create: function() {
            var self = this, o = self.options, e = self.element;

            self.slider =
                e.slider({value: 1, min: 1, max: 6,
                          slide: function(event, ui)
                          {self._slide_change(event, ui);},
                          start: function(event, ui)
                          {self._slide_start(event, ui);},
                          stop: function(event, ui)
                          {self._slide_stop(event, ui);}
                         });

            self.slider.find('.ui-slider-handle')
                .wrap('<div class="ui-slider-handle-parent"></div>');

            self._set_power(o.level);
        },


        destroy: function() {
            this.slider.destroy();
        },


        _setOption: function(option, value) {
            $.Widget.prototype._setOption.apply(this, arguments);

            switch (option) {
            case 'level': this._set_power(value); break;
            case 'label': this.label = value; break;
            }
        }
    });
})(jQuery);


/*************************** Folding slot functions ***************************/
function update_slot_entry(entry) {
    // Get slot
    var id = parseInt(entry.id);
    var slot;

    if (typeof fah.slots[id] == 'undefined') {
        $('#slots table').append(
            '<tr id="slot-' + id + '">' +
                '<td class="description"></td>' +
                '<td class="status"></td>' +
                '<td class="progress"><div><span></span></div></td>' +
                '<td class="eta"></td>' +
                '<td class="ppd"></td>' +
                '<td class="prcg"></td>' +
                '</tr>');

        fah.slots[id] = slot = {row: $('#slot-' + id).first()};

    } else slot = fah.slots[id];

    // Compute defaults & PRCG
    var prcg;
    var ppd = entry.ppd;
    if (typeof entry.unit_id == 'undefined') {
        entry.percentdone = '0%';
        entry.eta = '<center>--</center>';
        ppd = '--';
        prcg = '--';

    } else prcg = entry.project + ' (' + entry.run + ', ' + entry.clone +
        ', ' + entry.gen + ')';

    if (ppd == 0) ppd = '--';

    // Description
    if (entry.description !== slot.description ||
        entry.status !== slot.status) {
        var html = entry.description;

        slot.row.find('.description').html(html);
        slot.description = entry.description;
    }

    // Status
    if (entry.status !== slot.status || entry.reason !== slot.reason ||
       entry.nextattempt != slot.nextattempt) {
        var state = entry.status.toUpperCase();
        var status = state;
        if (state == 'PAUSED' && entry.reason) status = entry.reason;
        if (state == 'READY' && entry.waitingon)
            status = 'WAIT: ' + entry.nextattempt;

        status = '<span class="status_' + state + '">' + status + '</span>';

        slot.row.find('.status').html(status);

        slot.status = entry.status;
        slot.reason = entry.reason;
        slot.nextattempt = entry.nextattempt;
    }

    // Progress
    if (entry.percentdone !== slot.percentdone) {
        var percent = entry.percentdone;
        var progress = parseInt(percent.substr(0, percent.length - 1));

        slot.row.find('.progress span:first').html(percent);
        slot.row.find('.progress div:first').progressbar(
            {value: progress, showText: true});

        slot.percentdone = entry.percentdone;
    }

    // ETA
    if (entry.eta !== slot.eta) {
        slot.row.find('.eta').html(entry.eta);
        slot.eta = entry.eta;
    }

    // PPD
    if (entry.ppd !== slot.ppd) {
        slot.row.find('.ppd').html(ppd);
        slot.ppd = entry.ppd;
    }

    // PRCG
    if (prcg !== slot.prcg) {
        slot.row.find('.prcg').html(prcg);
        slot.prcg = prcg;
    }
}


function remove_slot(id) {
    if (typeof fah.slots[id] == 'undefined') return;
    fah.slots[id].row.remove();
    delete fah.slots[id];
}


function update_slots(data) {
    var ppd = 0;
    var slot_ids = {};
    var project_ids = {};

    $.each(data, function(i, entry) {
        if (typeof entry.ppd !== 'undefined') ppd += parseInt(entry.ppd);
        slot_ids[parseInt(entry.id)] = true;

        if (entry.project) {
            add_project(entry.project);
            project_ids[entry.project] = true;
        }

        update_slot_entry(entry);
    });

    if (fah.last_ppd != ppd) {
        fah.last_ppd = ppd;

        if (fah.ppd_ui == null) fah.ppd_ui = $('#ppd span');
        if (ppd <= 0) ppd = 'Unknown';
        fah.ppd_ui.html(ppd);
    }

    // Remove unused projects
    if (obj_size(project_ids) < obj_size(fah.projects)) {
        $.each(fah.projects, function (id, project) {
            if (!project_ids[id]) remove_project(id);
        });
    }

    // Remove unused slots
    if (obj_size(slot_ids) != obj_size(fah.slots)) {
        $.each(fah.slots, function (id, project) {
            if (!slot_ids[id]) remove_slot(id);
        });
    }
}


/****************************** Project functions *****************************/
function set_project(id, data) {
    if (typeof fah.projects[id] !== 'undefined') return;

    var tabs = $('#project-tabs');

    tabs.find('ul').first().append(
        '<li id="project-item-' + id + '"><a href="#project-' + id +
            '">Project ' + id + '</a></li>');
    tabs.append('<div id="project-' + id + '"><h2>You are contributing ' +
                'to project ' + id + '</h2></div></li>');

    var project = tabs.find('#project-' + id);
    fah.projects[id] = project;
    project.append($(data).find('#project-info'));

    // Open all links in an external window
    project.find("a").attr('target', '_blank');

    // Select newly added tab
    tabs.tabs('refresh');
    tabs.tabs('option', 'active', tabs.find('>ul >li').size() - 1);
    tabs.show();
}


function add_project(id) {
    if (!id) return;
    var url = fah.project_url + id;

    if (!fah.projects[id] && !$('#project-' + id).size())
        $.ajax({url: fah.project_url, dataType: 'jsonp', cache: true,
                data: {id: id}, success: dispatch});
}


function remove_project(id) {
    if (typeof fah.projects[id] == 'undefined') return;
    fah.projects[id].remove();
    $('#project-item-' + id).remove();
    delete fah.projects[id];

    // Activate the last tab if none are currently active
    var tabs = $('#project-tabs');
    tabs.tabs('refresh');
    var active = tabs.tabs('option', 'active');
    if (!active) tabs.tabs('option', 'active', tabs.find('>ul >li').size() - 1);
    tabs.show();
}


/****************************** Network functions *****************************/
function send_command(args) {
    args.data = get_arg(args.data, {});
    args.data.sid = sid;

    args.dataType = get_arg(args.dataType, 'json');
    args.cache = get_arg(args.cache, true);

    $.ajax(args);
}


function set_update(id, rate, path, vars) {
    vars = typeof vars !== 'undefined' ? vars : {};
    vars.sid = sid;
    vars.update_id = id;
    vars.update_rate = rate;
    vars.update_path = path;
    $.ajax({url: 'api/updates/set', data: vars});
}


function dispatch(data) {
    if (data == null) return;

    $.each(data, function (i, cmd) {
        try {
            switch (cmd[0]) {
            case '/api/basic': update_basic(cmd[1]); break;
            case '/api/slots': update_slots(cmd[1]); break;
            case 'heartbeat': break;
            case 'reset': reset(); break;
            case 'project': set_project(cmd[1], cmd[2]); break;
            case 'unconfigured': unconfigured(); break;
            default: debug("Unknown command: " + cmd[0]); break;
            }
        } catch (err) {debug('Command "' + cmd[0] + '": ' + err);}
    });
}


function ajax_error(jqXHR, status, error) {
    if (error) debug(status + ": " + error);
}


function update_failed(jqXHR, status, error) {
    ajax_error(jqXHR, status, error);

    if (5 < ++fah.failed_updates ||
        fah.last_update + fah.connection_timeout < (new Date).valueOf())
        disconnect();
    else setTimeout(updates, 100); // Delay to avoid deadlocks in some browsers
}


function update_succeeded(data) {
    fah.failed_updates = 0;
    dispatch(data);
    fah.last_update = (new Date).valueOf();
    setTimeout(updates, 100); // Delay to avoid deadlocks in some browsers
}


function updates() {
    $.ajax({url: 'api/updates', dataType: 'json', data: {sid: sid},
            error: update_failed, success: update_succeeded});
}


function disconnect(message, reload) {
    if (typeof message == 'undefined') message = 'disconnected';
    if (typeof reload == 'undefined') reload = true;

    if (fah.disconnected) return;
    fah.disconnected = true;

    sid = ''; // Reset SID

    // Abort any outstanding requests
    if (typeof $.xhrPool != 'undefined') $.xhrPool.abortAll();

    var data = {
        resizable: false, width: 450, modal: true, dialogClass: 'no-close',
        closeOnEscape: false, beforeClose: function() {return false;}
    };

    if (reload) data['buttons'] = {'Reload Page?': function() {
        top.location.href = 'http://folding.stanford.edu/client/';
    }};

    $('#' + message).dialog(data);
}


function reset() {
    // Abort any outstanding requests
    if (typeof $.xhrPool != 'undefined') $.xhrPool.abortAll();

    // Start updates
    set_update(0, 1, '/api/basic');
    set_update(1, 1, '/api/slots');

    // Check if client was configured
    send_command({url: 'api/configured', success: dispatch});
}


/***************************** Identity functions *****************************/
function identity_cancel() {
    $('#user').val(fah.user);
    $('#team').val(fah.team);
    $('#passkey').val(fah.passkey);
    $('#hidden-passkey').val(fah.passkey);

    $('#tabs').tabs({active: 0});
}


function identity_save() {
    var new_user = $('#user').val().trim();
    var new_team = $('#team').val().trim();
    var new_passkey = $('#passkey').val().trim();

    if (new_user == '') new_user = 'Anonymous';
    if (new_team == '') new_team = '0';

    var data = {};
    var changed = false;

    if (new_user !== fah.user) {
        if (!/^[!-~]+$/.test(new_user)) {
            alert('User name must be a non-empty string containing only ' +
                  'alphanumeric characters, standard punctuation and ' +
                  'no white-space.');
            return false;
        }

        data.user = new_user;
        changed = true;
    }

    if (new_team !== fah.team) {
        if (!/^\d{1,10}$/.test(new_team)) {
            alert('Team number must be a whole number no more than ten digts ' +
                  'long.');
            return false;
        }

        data.team = new_team;
        changed = true;
    }

    if (new_passkey !== fah.passkey) {
        if (new_passkey != '' &&
            !/^[a-fA-F0-9]{32}$/.test(new_passkey)) {
            alert('The passkey must be a 32 character hexadecimal string.');
            return false;
        }

        data.passkey = new_passkey;
        changed = true;
    }

    if (changed) {
        fah.user = new_user;
        fah.team = new_team;
        fah.passkey = new_passkey;
        send_command({url: 'api/set', data: data});
    }

    $('#tabs').tabs({active: 0});
    return true;
}


/******************************* News functions *******************************/
function twitter_news(data) {
    var news = $('#news');
    news.html(
        '<div class="button"><a target="_blank" href="' +
            'https://twitter.com/intent/user?screen_name=' +
            fah.twitter_account +
            '"><img src="images/follow.png"/> Follow</a></div>' +
            '<div class="button reload"><a href="javascript:void(0)">' +
            '<img src="images/retweet.png"/> Reload</a></div>' +
            '<h3>The Latest News from Folding@home</h3>');

    $.each(data, function (index, entry) {
        // Check if retweet
        if (typeof entry.retweeted_status != 'undefined')
            entry = entry.retweeted_status;

        // Extract title
        var title = '';
        var text = entry.text;
        var i = text.indexOf(':');
        if (i != -1) {
            title = text.substr(0, i);
            text = text.substr(i + 1);

            if (title.substr(0, 2) == 'RT' || title == 'New blog post') {
                i = text.indexOf(':');
                if (i != -1) {
                    title = text.substr(0, i);
                    text = text.substr(i + 1);
                }
            }
        }

        // Extract URL
        var url = '';
        i = text.indexOf('...');
        if (i != -1) {
            url = text.substr(i + 4);
            text = text.substr(0, i + 3);
        }
        if (url.length < 8) url = fah.blog_url;

        // Get Date
        var date = (new Date(Date.parse(entry.created_at))).toLocaleString();
        if (date == 'Invalid Date' || date == 'NaN')
            date = entry.created_at;

        // Retweet
        var retweet_url =
            'https://twitter.com/intent/retweet?tweet_id=' + entry.id_str;

        // Add news item
        news.append
        ('<div class="tweet">' +
         '  <a href="' + url + '" target="_blank">' +
         '    <div class="date">' + date + '</div>' +
         '    <div class="title">' + title + '</div>' +
         '    <div class="text">' + text + '</div>' +
         '    <div class="retweet">' +
         '      <a target="_blank" href="' + retweet_url + '">' +
         '        <img src="images/retweet.png"/>Retweet</a>' +
         '    </div>' +
         '  </a>' +
         '</div>');
    });

    news.append(
        '<h3><a href="http://folding.typepad.com/">More. . .</a></h3>');
}


function reload_news() {
    fah.news_loaded = false;
    $('#news').html('Loading. . .');
    load_news();
    return false; // Cancel event
}


function load_news() {
    if (fah.news_loaded) return;
    fah.news_loaded = true;

    var url = 'https://api.twitter.com/1/statuses/user_timeline.json';

    $.ajax({url: url, dataType: 'jsonp', cache: true,
            data: {screen_name: fah.twitter_account, count: 8, include_rts: 1,
                   trim_user: 1, include_entities: 1},
            success: twitter_news});
}


/******************************* Help functions *******************************/
function help_select(target) {
    if (typeof fah.last_help != 'undefined') fah.last_help.hide();
    fah.last_help = $('#' + target).show();
}


function help_click(event) {
    help_select(event.target.rel);
}


function init_help() {
    var help = $('#help');
    var div = $('<div/>');
    var menu = $('<div/>').attr({id: 'help-menu'}).appendTo(div);
    var ul = $('<ul/>').appendTo(menu);
    var content = $('<div/>').attr({id: 'help-content'}).appendTo(div);
    var first = null;

    $.each(help.children(), function (index, child) {
        child = $(child);
        var id = child.attr('id');
        var title = child.find('.title').html();

        if (first == null) first = id;

        var a = $('<a rel="' + id + '" href="#">' + title + '</a>');
        a.click(help_click);
        $('<li/>').append(a).appendTo(ul);

        child.addClass('item');
        content.append(child);
    });

    help.html(div);

    if (first != null) help_select(first);
}


/******************************** Main function *******************************/
$(function() {
    // Check browser version
    BrowserDetect.init();
    var browser = BrowserDetect.browser;
    var version = BrowserDetect.version;

    // NOTE: If browser versions are changed here they must also be updated
    //   in #browser-warn in index.html.
    if (browser == 'Chrome' && 23 <= version);
    else if (browser == 'Firefox' && 16 <= version);
    else if (browser == 'Safari' && 5.1 <= version);
    else if (browser == 'Explorer' && 8 <= version);
    else {
        var dialog = $('#browser-warn');
        dialog.dialog({
            title: 'Warning: Browser reports as ' + browser + ' version ' +
                version,
            modal: true, resizable: false, width: 600,
            buttons: {'Proceed': function () {dialog.dialog('destroy');}}
        });
    }

    // Tell other instances to disconnect
    try {
        var intercom = Intercom.getInstance();
        var message = 'fahclient';

        intercom.on(message, function(data) {
            if (fah.timestamp < data.message) disconnect('reopened');
        });

        intercom.emit(message, {message: fah.timestamp});
    } catch (e) {debug(err.message);}

    // Check session ID
    if (typeof sid == 'undefined' || sid == '') {
        location.reload();
        return;
    }

    // Track all ajax requests so they can be aborted
    try {
        $.xhrPool = [];
        $.xhrPool.abortAll = function() {
            $(this).each(function(idx, jqXHR) {jqXHR.abort();});
            $.xhrPool.length = 0
        };

        $.ajaxSetup({
            beforeSend: function(jqXHR) {$.xhrPool.push(jqXHR);},
            complete: function(jqXHR) {
                if (typeof $.xhrPool == 'undefined') return;
                var index = $.xhrPool.indexOf(jqXHR);
                if (index > -1) $.xhrPool.splice(index, 1);
            }
        });
    } catch (e) {debug(err.message);}

    // Enable bug reports
    $('#report-bug').click(bug_report);

    // Open all links in an external window
    $("a").attr('target', '_blank');

    // Set tab from location hash
    var active_tab = 0; // First tab
    if (location.hash) {
        var count = 0;

        $.each($('#tabs a'), function (index, a) {
            if (location.hash == $(a).attr('href')) {
                active_tab = count;
                return false;
            }
            count++;
        });
    }

    // Tabs
    var tabs = $('#tabs');
    tabs.tabs({active: active_tab, activate: tabs_activate});
    tabs.show();
    $('#noscript').hide();

    $('#project-tabs').tabs();

    // Power level
    fah.power_slide = $("#power-slider").fah_powerbar(
        {stop: power_slide_stop, label: '#power-label'});

    // Cause
    $('#cause select').change(cause_changed);

    // Save button
    $('#identity .button').button();
    $('#identity #save').click(identity_save);
    $('#identity #cancel').click(identity_cancel);

    $('#news .reload').click(reload_news);

    // Initialize communication with client
    reset();

    // Start two instances offset by 1 second
    updates();
    setTimeout(updates, 1000);

    // Help
    init_help();

    // Email links
    var mail = $('a.mail');
    var msg =
        'mailto:?subject=' + fah.email_subject + '&body=' + fah.email_body;
    mail.attr({href: msg, rel: 'nofollow',
               title: 'Click here to open your email and send this message ' +
               'to your friends:\n\n---------------------------------------' +
               '-----------------------------------------------------------' +
               '\nSubject: ' + fah.email_subject + '\n\n' +
               fah.email_body});

    // Passkey unhide
    $('#identity-form').hover(function () {
        $('#hidden-passkey').hide();
        $('#passkey').show();

    }, function () {
        $('#hidden-passkey').val($('#passkey').val().trim());
        $('#passkey').hide();
        $('#hidden-passkey').show();
    });
});
